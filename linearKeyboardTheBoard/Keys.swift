//  Copyleft ¬© 2017 Graham Heath. No rights reserved.
import UIKit

let KC_EMPTY = ButtonKey(empty:true)
let KC_KEEBS = ButtonKey(label: "üåê", action: NEXT_KEYBOARD)
let KC_TAB = ButtonKey(label: " ", action: TAB)
let KC_BS = ButtonKey(label: "‚Üê", action: BACKSPACE)
let KC_BS_2X = ButtonKey(label: "‚Üê", width: 2.0, action: BACKSPACE)
let KC_DEL = ButtonKey(label: "‚á†", action: DELETE)
let KC_CAPS = ButtonKey(label: "caps", action: CAPS)
let KC_COMMA = ButtonKey(label: ",", shifted: "<")
let KC_PERIOD = ButtonKey(label: ".", shifted: ">")
let KC_LT = ButtonKey(label: "<", shifted: ",")
let KC_GT = ButtonKey(label: ">", shifted: ".")
let KC_SEMICOLON = ButtonKey(label: ";", shifted: ":")
let KC_COLON = ButtonKey(label: ":", shifted: ";")
let KC_FSLASH = ButtonKey(label: "/", shifted: "?")
let KC_QUESTION = ButtonKey(label: "?", shifted: "/")
let KC_EMOJI = ButtonKey(label: "üòÅ")
let KC_SPACE = ButtonKey(label: "[space]", action: SPACE)
let KC_SPACE_2X = ButtonKey(label: " ", width: 2.0, shifted: " ", action: SPACE)
let KC_UNDER = ButtonKey(label: "_")
let KC_LOWER = ButtonKey(label: "üîΩ", action: LOWER)
let KC_NORMAL = ButtonKey(label: "‚è∫", action: NORMAL)
let KC_RAISE = ButtonKey(label: "üîº", action: RAISE)
let KC_LEFT = ButtonKey(label: "‚¨ÖÔ∏è", action: LEFT)
let KC_DOWN = ButtonKey(label: "‚¨áÔ∏è", action: DOWN)
let KC_UP = ButtonKey(label: "‚¨ÜÔ∏è", action: UP)
let KC_RIGHT = ButtonKey(label: "‚û°Ô∏è", action: RIGHT)
let KC_SHIFT = ButtonKey(label: "‚á™", shifted: "‚¨Ü", action: SHIFT)
let KC_ENTER = ButtonKey(label: "‚èé", buttonType: UIButtonType.roundedRect, action: ENTER)
let KC_Q = ButtonKey(label: "q")
let KC_W = ButtonKey(label: "w")
let KC_E = ButtonKey(label: "e")
let KC_R = ButtonKey(label: "r")
let KC_T = ButtonKey(label: "t")
let KC_Y = ButtonKey(label: "y")
let KC_U = ButtonKey(label: "u")
let KC_I = ButtonKey(label: "i")
let KC_O = ButtonKey(label: "o")
let KC_P = ButtonKey(label: "p")
let KC_A = ButtonKey(label: "a")
let KC_S = ButtonKey(label: "s")
let KC_D = ButtonKey(label: "d")
let KC_F = ButtonKey(label: "f")
let KC_G = ButtonKey(label: "g")
let KC_H = ButtonKey(label: "h")
let KC_J = ButtonKey(label: "j")
let KC_K = ButtonKey(label: "k")
let KC_L = ButtonKey(label: "l")
let KC_Z = ButtonKey(label: "z")
let KC_X = ButtonKey(label: "x")
let KC_C = ButtonKey(label: "c")
let KC_V = ButtonKey(label: "v")
let KC_B = ButtonKey(label: "b")
let KC_N = ButtonKey(label: "n")
let KC_M = ButtonKey(label: "m")
let KC_1 = ButtonKey(label: "1", shifted: "!")
let KC_2 = ButtonKey(label: "2", shifted: "@")
let KC_3 = ButtonKey(label: "3", shifted: "#")
let KC_4 = ButtonKey(label: "4", shifted: "$")
let KC_5 = ButtonKey(label: "5", shifted: "%")
let KC_6 = ButtonKey(label: "6", shifted: "^")
let KC_7 = ButtonKey(label: "7", shifted: "&")
let KC_8 = ButtonKey(label: "8", shifted: "*")
let KC_9 = ButtonKey(label: "9", shifted: "(")
let KC_0 = ButtonKey(label: "0", shifted: ")")
let KC_EXCL = ButtonKey(label: "!", shifted: "0")
let KC_AT = ButtonKey(label: "@", shifted: "1")
let KC_HASH = ButtonKey(label: "#", shifted: "2")
let KC_DOLL = ButtonKey(label: "$", shifted: "3")
let KC_PERC = ButtonKey(label: "%", shifted: "4")
let KC_CAR = ButtonKey(label: "^", shifted: "5")
let KC_AMP = ButtonKey(label: "&", shifted: "6")
let KC_EXP = ButtonKey(label: "*", shifted: "7")
let KC_LPAR = ButtonKey(label: "(", shifted: "8")
let KC_RPAR = ButtonKey(label: ")", shifted: "9")
let KC_UNDR = ButtonKey(label: "_", shifted: "-")
let KC_DASH = ButtonKey(label: "-", shifted: "_")
let KC_TILD = ButtonKey(label: "~", shifted: "`")
let KC_GRAV = ButtonKey(label: "`", shifted: "~")
let KC_RCBR = ButtonKey(label: "}", shifted: "]")
let KC_LCBR = ButtonKey(label: "{", shifted: "[")
let KC_RBRA = ButtonKey(label: "]", shifted: "}")
let KC_LBRA = ButtonKey(label: "[", shifted: "{")
let KC_EQUA = ButtonKey(label: "=", shifted: "+")
let KC_ADD = ButtonKey(label: "+", shifted: "=")
let KC_PIPE = ButtonKey(label: "|", shifted: "\\")
let KC_BSLA = ButtonKey(label: "\\", shifted: "|")
let KC_DQUO = ButtonKey(label: "\"", shifted: "'")
let KC_QUO = ButtonKey(label: "'", shifted: "\"")

